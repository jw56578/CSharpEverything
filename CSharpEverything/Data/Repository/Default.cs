using ORM;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Data.Repository
{
    /// <summary>
    /// if this was the thing resposible for getting entities generically how would it do it without relection per action
    /// the Type needs to be of base entity
    /// this will require the base entity to provide information about the entity
    /// this is not possible because you don't always have an instance of the entity type
    /// such as on the fill method, how are you supposed to know what derived base entity it is?
    /// just have the constructor take the name of the entity!
    /// so if you send in Person, and you use that as the string in order to select from a database table or maybe Parse
    ///  then how do you return a collection of Person objects from the string Person
    /// 
    /// 
    /// ******
    /// you cannot use this unless you do reflection, 
    /// every type must have a repo generated by a template as opposed to hand
    /// so basically this thing is pointless as there is no reason to use reflection when you can just use code generation
    /// 
    /// </summary>
    public class DefaultRepository : IRepository<BaseEntity>
    {
        QueryBuilder<BaseEntity> qb = null;
       
        
        string entityName;
        public DefaultRepository(string entityName) {
            this.entityName = entityName;
            qb = new QueryBuilder<BaseEntity>(new Entity<BaseEntity>() { Name = entityName });
        }
        public void Fill(List<BaseEntity> collection)
        {
            //if this was a person type, how the heck are you suppose to populate base entity collection with a specific Person Type
           
        }
        public void Save(BaseEntity entity)
        {
            throw new NotImplementedException();
        }

        BaseEntity IRepository<BaseEntity>.Get(int id)
        {
            throw new NotImplementedException();
        }

        public void AddRelation(Relation relation)
        {
            throw new NotImplementedException();
        }

        public void AddField(Field field)
        {
            throw new NotImplementedException();
        }
    }
}
